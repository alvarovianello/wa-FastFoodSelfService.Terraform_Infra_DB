name: Create DB Postgres RDS AWS

on:
  workflow_dispatch:

jobs:
  create-db:
    name: terraform
    runs-on: ubuntu-latest  

    environment: production

    env:
      TF_VAR_regionDefault: ${{ vars.REGION_DEFAULT }}
      TF_VAR_projectName: ${{ vars.PROJECT_NAME }}
      TF_VAR_dbPassword: ${{ secrets.DB_PASSWORD }}
      TF_VAR_dbIdentifier: ${{ vars.DB_IDENTIFIER }}
      TF_VAR_dbName: ${{ vars.DB_NAME }}
      TF_VAR_dbUser: ${{ vars.DB_USER}}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ vars.REGION_DEFAULT }}

      - name: Setup Terraform
        if: success()
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        id: fmt
        working-directory: terraform_db_postgres
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: terraform_db_postgres
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        working-directory: terraform_db_postgres
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: terraform_db_postgres
        run: terraform plan -out=tfplan -no-color -input=false
        continue-on-error: true

      - name: Terraform Apply
        working-directory: terraform_db_postgres
        run: terraform apply -input=false -auto-approve

      - name: Get Outputs from Terraform
        working-directory: terraform_db_postgres
        id: output
        run: |
          echo "db_security_group_id=$(terraform output -raw db_security_group_id)" >> $GITHUB_OUTPUT
          echo "db_subnet_group_id=$(terraform output -raw db_subnet_group_id)" >> $GITHUB_OUTPUT

      - name: Update GitHub Env Variables
        run: |
          echo "DB_SECURITY_GROUP_ID=${{ steps.output.outputs.db_security_group_id }}" >> $GITHUB_ENV
          echo "DB_SUBNET_GROUP_ID=${{ steps.output.outputs.db_subnet_group_id }}" >> $GITHUB_ENV